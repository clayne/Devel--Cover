# Copyright 2012-2025, Paul Johnson (paul@pjcj.net)

# This software is free.  It is licensed under the same terms as Perl itself.

# The latest version of this software should be available from my homepage:
# https://pjcj.net

package Devel::Cover::Report::Nvim;

use strict;
use warnings;

our $VERSION;

BEGIN {
  # VERSION
}

use Devel::Cover::DB;
use Devel::Cover::Inc;

BEGIN { $VERSION //= $Devel::Cover::Inc::VERSION }

use Getopt::Long;
use Template 2.00;

sub get_options {
  my ($self, $opt) = @_;
  $opt->{outputfile} = "coverage.lua";
  die "Invalid command line options" unless GetOptions(
    $opt, qw(
      outputfile=s
    )
  );
}

sub report {
  my ($pkg, $db, $options) = @_;

  my $template = Template->new({
    LOAD_TEMPLATES =>
      [ Devel::Cover::Report::Nvim::Template::Provider->new({}) ]
  });

  my $vars = {
    runs => [
      map {
        run      => $_->run,
          perl   => $_->perl,
          OS     => $_->OS,
          start  => scalar gmtime $_->start,
          finish => scalar gmtime $_->finish,
      },
      sort { $a->start <=> $b->start } $db->runs,
    ],
    cov_time => do {
      my $time = 0;
      for ($db->runs) {
        $time = $_->finish if $_->finish > $time;
      }
      int $time
    },
    version => $VERSION,
    files   => $options->{file},
    cover   => $db->cover,
    types   => [ grep $_ ne "time", keys %{ $options->{show} } ],
  };

  my $out = "$options->{outputdir}/$options->{outputfile}";
  $template->process("nvim", $vars, $out) or die $template->error();

  print "Neovim Lua script written to $out\n" unless $options->{silent};
}

1;

package Devel::Cover::Report::Nvim::Template::Provider;

use strict;
use warnings;

# VERSION

use base "Template::Provider";

my %Templates;

sub fetch {
  my $self = shift;
  my ($name) = @_;
  # print "Looking for <$name>\n";
  $self->SUPER::fetch(exists $Templates{$name} ? \$Templates{$name} : $name)
}

$Templates{nvim} = <<'EOT';
-- This file was generated by Devel::Cover Version [% version %]
-- Devel::Cover is copyright 2001-2025, Paul Johnson (paul@pjcj.net)
-- Devel::Cover is free. It is licensed under the same terms as Perl itself.
-- The latest version of Devel::Cover should be available from my homepage:
-- https://pjcj.net

[% FOREACH r = runs %]
-- Run:          [% r.run    %]
-- Perl version: [% r.perl   %]
-- OS:           [% r.OS     %]
-- Start:        [% r.start  %]
-- Finish:       [% r.finish %]

[% END %]

local M = {}

-- Highlight groups for coverage display
local highlight_groups = {
  cov_pod = { ctermfg = "Green", cterm = "bold", gui = "bold", guifg = "Green" },
  cov_pod_error = { ctermfg = "Red", cterm = "bold", gui = "bold", guifg = "Red" },
  cov_subroutine = { ctermfg = "Green", cterm = "bold", gui = "bold", guifg = "Green" },
  cov_subroutine_error = { ctermfg = "Red", cterm = "bold", gui = "bold", guifg = "Red" },
  cov_statement = { ctermfg = "Green", cterm = "bold", gui = "bold", guifg = "Green" },
  cov_statement_error = { ctermfg = "Red", cterm = "bold", gui = "bold", guifg = "Red" },
  cov_branch = { ctermfg = "Green", cterm = "bold", gui = "bold", guifg = "Green" },
  cov_branch_error = { ctermfg = "Red", cterm = "bold", gui = "bold", guifg = "Red" },
  cov_condition = { ctermfg = "Green", cterm = "bold", gui = "bold", guifg = "Green" },
  cov_condition_error = { ctermfg = "Red", cterm = "bold", gui = "bold", guifg = "Red" },
}

-- Define highlight groups
for group, opts in pairs(highlight_groups) do
  local cmd = "highlight " .. group
  for key, value in pairs(opts) do
    cmd = cmd .. " " .. key .. "=" .. value
  end
  vim.cmd(cmd)
end

-- Sign definitions
local sign_definitions = {
  { name = "pod", text = "P ", linehl = "cov", texthl = "cov_pod" },
  { name = "pod_error", text = "P ", linehl = "err", texthl = "cov_pod_error" },
  { name = "subroutine", text = "R ", linehl = "cov", texthl = "cov_subroutine" },
  { name = "subroutine_error", text = "R ", linehl = "err", texthl = "cov_subroutine_error" },
  { name = "statement", text = "S ", linehl = "cov", texthl = "cov_statement" },
  { name = "statement_error", text = "S ", linehl = "err", texthl = "cov_statement_error" },
  { name = "branch", text = "B ", linehl = "cov", texthl = "cov_branch" },
  { name = "branch_error", text = "B ", linehl = "err", texthl = "cov_branch_error" },
  { name = "condition", text = "C ", linehl = "cov", texthl = "cov_condition" },
  { name = "condition_error", text = "C ", linehl = "err", texthl = "cov_condition_error" },
}

-- Define signs
for _, sign_def in ipairs(sign_definitions) do
  vim.fn.sign_define(sign_def.name, {
    text = sign_def.text,
    linehl = sign_def.linehl,
    texthl = sign_def.texthl
  })
end

-- Placeholder functions for custom configuration
function M.coverage_old(filename)
  -- This function is called when coverage data is older than the file
  -- Override this in your local configuration if needed
end

function M.coverage_valid(filename)
  -- This function is called when coverage data is current
  -- Override this in your local configuration if needed
end

-- Load local configuration if it exists
local config_path = vim.fn.stdpath("config") .. "/lua/devel-cover.lua"
if vim.fn.filereadable(config_path) == 1 then
  print("Reading local config from " .. config_path)
  dofile(config_path)
end

local types = {
[%- FOREACH type = types -%] "[%- type -%]",[%- END -%]
[%- FOREACH type = types -%] "[%- type -%]_error",[%- END -%]
}

[%- MACRO criterion(file, crit, error) BLOCK %]
      [% crit %][% error ? "_error" : "" %] = {
    [%- criteria = cover.file("$file").$crit -%]
    [%- FOREACH loc = criteria.items.nsort -%]
        [%- cov = 0 -%]
        [%- FOREACH l = criteria.location("$loc") -%]
            [%- IF error ? l.error : l.covered -%] [% loc -%],[%- cov = 1; LAST; END -%]
        [%- LAST IF cov; END -%]
    [%- END -%]
      },
[%- END %]

local coverage = {
[% FOREACH file = files %]
  ["[% file %]"] = {
[%- FOREACH type = types; criterion(file, type, 0); criterion(file, type, 1); END %]
  },
[% END %]
}

local cov_time = [% cov_time %]

-- Find coverage data for a given filename
local function coverage_for(filename)
  local fn_len = string.len(filename)
  for cf, _ in pairs(coverage) do
    local f = string.gsub(cf, "^blib/", "")
    local match_pos = string.find(filename, f .. "$")
    if match_pos and match_pos <= fn_len then
      return coverage[cf]
    end
  end

  print("No coverage recorded for " .. filename)
  return {}
end

local signs = {}
local sign_num = 1

-- Add coverage signs to a file
local function add_coverage_signs(filename)
  local cov = coverage_for(filename)
  if vim.tbl_isempty(cov) then
    return
  end

  local file_time = vim.fn.getftime(filename)
  if file_time > cov_time then
    print("File is newer than coverage run of " .. os.date("%c", cov_time))
    M.coverage_old(filename)
  else
    M.coverage_valid(filename)
  end

  if not signs[filename] then
    signs[filename] = {}
  end
  local s = signs[filename]

  -- Process types in reverse order for proper priority
  local reversed_types = {}
  for i = #types, 1, -1 do
    table.insert(reversed_types, types[i])
  end

  for _, type_name in ipairs(reversed_types) do
    if cov[type_name] then
      for _, line in ipairs(cov[type_name]) do
        if not s[line] then
          local id = sign_num
          sign_num = sign_num + 1
          s[line] = id
          vim.fn.sign_place(id, "", type_name, filename, { lnum = line })
        end
      end
    end
  end
end

-- Remove coverage signs from a file
local function del_coverage_signs(filename)
  if signs[filename] then
    local s = signs[filename]
    for line, id in pairs(s) do
      vim.fn.sign_unplace("", { id = id })
    end
    signs[filename] = {}
  end
end

-- User commands
vim.api.nvim_create_user_command("Cov", function()
  add_coverage_signs(vim.fn.expand("%:p"))
end, {})

vim.api.nvim_create_user_command("Uncov", function()
  del_coverage_signs(vim.fn.expand("%:p"))
end, {})

-- Auto commands for coverage display
local augroup = vim.api.nvim_create_augroup("devel-cover", { clear = true })

-- Show signs automatically for all known files
for filename, _ in pairs(coverage) do
  vim.api.nvim_create_autocmd("BufReadPost", {
    group = augroup,
    pattern = filename,
    callback = function()
      add_coverage_signs(vim.fn.expand("%:p"))
    end
  })

  local f = string.gsub(filename, "^blib/", "")
  if filename ~= f then
    vim.api.nvim_create_autocmd("BufReadPost", {
      group = augroup,
      pattern = f,
      callback = function()
        add_coverage_signs(vim.fn.expand("%:p"))
      end
    })
  end
end

-- Apply coverage to current buffer
add_coverage_signs(vim.fn.expand("%:p"))

return M
EOT

1

__END__

=head1 NAME

Devel::Cover::Report::Nvim - Backend for displaying coverage data in Neovim

=head1 SYNOPSIS

 cover -report nvim

=head1 DESCRIPTION

This module provides a reporting mechanism for displaying coverage data in
Neovim using Lua.  It is designed to be called from the C<cover> program.

By default, the output of this report is a file named C<coverage.lua> in the
directory of the coverage database.  To use it, run

 :luafile cover_db/coverage.lua

and you should see signs in the left column indicating the coverage status of
that line.

The signs are as follows:

 P - Pod coverage
 S - Statement coverage
 R - Subroutine coverage
 B - Branch coverage
 C - Condition coverage

The last of the criteria, in the order given above, is the one which is
displayed.  Correctly covered criteria are shown in green.  Incorrectly
covered criteria are shown in red.  Any incorrectly covered criterion will
override a correctly covered criterion.

If the coverage for the file being displayed is out of date the function
called coverage_old() is called and passed the name of the file.  Similarly,
for current coverage data file coverage_valid() is called.

Signs may be overridden in a file named devel-cover.lua located in your
Neovim configuration directory (~/.config/nvim/lua/devel-cover.lua).

For example, using the solarized theme:

 -- ~/.config/nvim/lua/devel-cover.lua
 local M = {}

 local fg_cover = "#859900"
 local fg_error = "#dc322f"
 local bg_valid = "#073642"
 local bg_old   = "#342a2a"

 local types = { "pod", "subroutine", "statement", "branch", "condition" }

 for _, type_name in ipairs(types) do
   vim.cmd("highlight cov_" .. type_name .. " ctermbg=1 cterm=bold gui=NONE guifg=" .. fg_cover)
   vim.cmd("highlight cov_" .. type_name .. "_error ctermbg=1 cterm=bold gui=NONE guifg=" .. fg_error)
 end
 vim.cmd("highlight SignColumn ctermbg=0 guibg=" .. bg_valid)

 local function set_bg(bg)
   for _, type_name in ipairs(types) do
     vim.cmd("highlight cov_" .. type_name .. " guibg=" .. bg)
     vim.cmd("highlight cov_" .. type_name .. "_error guibg=" .. bg)
   end
   vim.cmd("highlight SignColumn ctermbg=0 guibg=" .. bg)
 end

 function M.coverage_valid(filename)
   set_bg(bg_valid)
 end

 function M.coverage_old(filename)
   set_bg(bg_old)
 end

 return M

This configuration sets the background colour of the signs to a dark red when
the coverage data is out of date.

coverage.lua adds two user commands: :Cov and :Uncov which can be used to
toggle the state of coverage signs.

The idea and the lua template is adapted from the Vim version which was
shamelessly stolen from Simplecov-Vim.  See
https://github.com/nyarly/Simplecov-Vim

=head1 SEE ALSO

 Devel::Cover
 Devel::Cover::Report::Vim
 Simplecov-Vim (https://github.com/nyarly/Simplecov-Vim)

=head1 BUGS

Huh?

=head1 LICENCE

Copyright 2012-2025, Paul Johnson (paul@pjcj.net)

This software is free.  It is licensed under the same terms as Perl itself.

The latest version of this software should be available from my homepage:
https://pjcj.net

The template is adapted from the Vim version which was copied from Simplecov-Vim
(https://github.com/nyarly/Simplecov-Vim) and is under the MIT Licence.


The MIT License

Copyright (c) 2011 Judson Lester

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

=cut
